#
# Copyright 2020 Jaroslav Chmurny
#
# This file is part of AWS Sandbox.
#
# AWS Sandbox is free software developed for educational purposes. It
# is licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Three Lambda functions (all using the same codebase) behind an ALB using path based routing.
  Each of the Lambda functions is used to serve a different path.

Parameters:
  FunctionCodeS3BucketParam:
    Description: The name of the S3 bucket storing the ZIP files with the code for the Lambda functions
    Type: String

  FunctionCodeS3KeyParam:
    Description: S3 object key with the filename of the ZIP file containing the common code for all three Lambda functions
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

  SubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'

  # the subnets need a route table with default route to the Intenet Gateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetOne

  SubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetTwo

  # the Lambda functions in fact do not need any special permissions, but the Role
  # property is mandatory; so the easiest/cheapest way to solve the problem is to create
  # a new role and use an existing AWS managed policy
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaExecution-Role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AWSLambdaExecute"

  RedFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function used as ALB target for the /red path
      FunctionName: !Sub "${AWS::StackName}-RedFunction"
      Handler: alb-target.main
      Runtime: python3.8
      Role: !GetAtt ["FunctionExecutionRole", "Arn"]
      Code:
        S3Bucket: !Ref FunctionCodeS3BucketParam
        S3Key: !Ref FunctionCodeS3KeyParam
      Environment:
        Variables:
          COLOR: 'RED'

  GreenFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function used as ALB target for the /green path
      FunctionName: !Sub "${AWS::StackName}-GreenFunction"
      Handler: alb-target.main
      Runtime: python3.8
      Role: !GetAtt ["FunctionExecutionRole", "Arn"]
      Code:
        S3Bucket: !Ref FunctionCodeS3BucketParam
        S3Key: !Ref FunctionCodeS3KeyParam
      Environment:
        Variables:
          COLOR: 'GREEN'

  BlueFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function used as ALB target for the /blue path
      FunctionName: !Sub "${AWS::StackName}-BlueFunction"
      Handler: alb-target.main
      Runtime: python3.8
      Role: !GetAtt ["FunctionExecutionRole", "Arn"]
      Code:
        S3Bucket: !Ref FunctionCodeS3BucketParam
        S3Key: !Ref FunctionCodeS3KeyParam
      Environment:
        Variables:
          COLOR: 'BLUE'

  InboundHTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP traffic on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub "${AWS::StackName}-LoadBalancer"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref InboundHTTPSecurityGroup
      Subnets:
        - !Ref SubnetOne
        - !Ref SubnetTwo
      Type: application

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            MessageBody: No Lambda function registered for this path

  RedLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ["RedFunction", "Arn"]
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com

  RedTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: RedLambdaPermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt ["RedFunction", "Arn"]

  GreenLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ["GreenFunction", "Arn"]
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com

  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: GreenLambdaPermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt ["GreenFunction", "Arn"]

  BlueLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ["BlueFunction", "Arn"]
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com

  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: BlueLambdaPermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt ["BlueFunction", "Arn"]

  RedPathListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Actions:
        - Type: forward
          TargetGroupArn: !Ref RedTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/red"
      Priority: 1

  GreenPathListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Actions:
        - Type: forward
          TargetGroupArn: !Ref GreenTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/green"
      Priority: 2

  BluePathListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BlueTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/blue"
      Priority: 3

Outputs:
  DNSName:
    Value: !GetAtt ["LoadBalancer", "DNSName"]
