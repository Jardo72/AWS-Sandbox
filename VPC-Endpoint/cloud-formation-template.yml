#
# Copyright 2021 Jaroslav Chmurny
#
# This file is part of AWS Sandbox.
#
# AWS Sandbox is free software developed for educational purposes. It
# is licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

AWSTemplateFormatVersion: 2010-09-09
Description: |
  Demonstration of gateway VPC endpoints (S3) and IAM policies with conditions.

Parameters:
  UnrestrictedBucketNameParam:
    Description: The name of the S3 bucket without any bucket policy
    Type: String

  VPCRestrictedBucketNameParam:
    Description: The name of the S3 bucket with bucket policy allowing only access from the green VPC
    Type: String

  VPCEndpointRestrictedBucketNameParam:
    Description: The name of the S3 bucket with bucket policy allowing only access via the the green VPC endpoint
    Type: String

  RedVPCCIDRParam:
    Description: CIDR block for the first of the two VPCs labeled as red as EC2 instances running in it will have no access to the restricted buckets
    Type: String
    Default: 10.0.0.0/16

  GreenVPCCIDRParam:
    Description: CIDR block for the second of the two VPCs (labeled as green)
    Type: String
    Default: 10.1.0.0/16

  CurrentVersionAMIIdParam:
    Description: AMI ID for the EC2 instances (this should automatically take the current version).
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  UnrestrictedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref UnrestrictedBucketNameParam
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  VPCRestrictedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref VPCRestrictedBucketNameParam
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  VPCRestrictedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VPCRestrictedBucketNameParam
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Effect: Deny
            Resource: !Sub "arn:aws:s3:::${VPCRestrictedBucketNameParam}/*"
            Principal: "*"
            Condition:
              StringNotEquals:
                aws:sourceVpc: !Ref GreenVPC
          - Action:
              - "s3:ListBucket"
            Effect: Deny
            Resource: !Sub "arn:aws:s3:::${VPCRestrictedBucketNameParam}"
            Principal: "*"
            Condition:
              StringNotEquals:
                aws:sourceVpc: !Ref GreenVPC

  VPCEndpointRestrictedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref VPCEndpointRestrictedBucketNameParam
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  VPCEndpointRestrictedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VPCEndpointRestrictedBucketNameParam
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Effect: Deny
            Resource: !Sub "arn:aws:s3:::${VPCEndpointRestrictedBucketNameParam}/*"
            Principal: "*"
            Condition:
              StringNotEquals:
                aws:sourceVpce: !Ref GreenVPCEndpoint
          - Action:
              - "s3:ListBucket"
            Effect: Deny
            Resource: !Sub "arn:aws:s3:::${VPCEndpointRestrictedBucketNameParam}"
            Principal: "*"
            Condition:
              StringNotEquals:
                aws:sourceVpce: !Ref GreenVPCEndpoint

  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-S3AccessRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${UnrestrictedBucketNameParam}"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${UnrestrictedBucketNameParam}/*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${VPCRestrictedBucketNameParam}"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${VPCRestrictedBucketNameParam}/*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${VPCEndpointRestrictedBucketNameParam}"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${VPCEndpointRestrictedBucketNameParam}/*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref S3AccessRole

  RedVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref RedVPCCIDRParam
      Tags:
        - Key: Name
          Value: Red

  RedInternetGateway:
    Type: AWS::EC2::InternetGateway

  RedVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref RedVPC
      InternetGatewayId: !Ref RedInternetGateway

  RedSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RedVPC
      CidrBlock: !Select [0, !Cidr [!Ref RedVPCCIDRParam, 1, 8 ]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

  RedRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RedVPC

  RedInternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RedRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref RedInternetGateway

  RedSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RedRouteTable
      SubnetId: !Ref RedSubnet

  RedSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound SSH traffic
      VpcId: !Ref RedVPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  RedVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RedRouteTable
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      VpcId: !Ref RedVPC

  RedEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      SubnetId: !Ref RedSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref CurrentVersionAMIIdParam
      InstanceType: t2.nano
      SecurityGroupIds:
        - !Ref RedSecurityGroup
      Tags:
        - Key: Name
          Value: Red

  GreenVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref GreenVPCCIDRParam
      Tags:
        - Key: Name
          Value: Green

  GreenInternetGateway:
    Type: AWS::EC2::InternetGateway

  GreenVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref GreenVPC
      InternetGatewayId: !Ref GreenInternetGateway

  GreenSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GreenVPC
      CidrBlock: !Select [0, !Cidr [!Ref GreenVPCCIDRParam, 1, 8 ]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

  GreenRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GreenVPC

  GreenInternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GreenRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref GreenInternetGateway

  GreenSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref GreenRouteTable
      SubnetId: !Ref GreenSubnet

  GreenSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound SSH traffic
      VpcId: !Ref GreenVPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  GreenVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref GreenRouteTable
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      VpcId: !Ref GreenVPC

  GreenEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      SubnetId: !Ref GreenSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref CurrentVersionAMIIdParam
      InstanceType: t2.nano
      SecurityGroupIds:
        - !Ref GreenSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir /s3-data
          chmod a+rwx /s3-data
          echo 'Hello world!!!' > /s3-data/hello-world.txt
          chmod a+rw /s3-data/hello-world.txt
          echo 'Good bye!!!' > /s3-data/good-bye.txt
          chmod a+rw /s3-data/good-bye.txt
          echo 'Good morning!!!' > /s3-data/good-morning.txt
          chmod a+rw /s3-data/good-morning.txt
          echo 'Good afternoon!!!' > /s3-data/good-afternoon.txt
          chmod a+rw /s3-data/good-afternoon.txt
          echo 'Good evening!!!' > /s3-data/good-evening.txt
          chmod a+rw /s3-data/good-evening.txt
          echo 'Good night!!!' > /s3-data/good-night.txt
          chmod a+rw /s3-data/good-night.txt

          aws s3 cp /s3-data/hello-world.txt s3://${UnrestrictedBucketNameParam}
          aws s3 cp /s3-data/good-bye.txt s3://${UnrestrictedBucketNameParam}
          aws s3 cp /s3-data/good-night.txt s3://${UnrestrictedBucketNameParam}

          aws s3 cp /s3-data/good-bye.txt s3://${VPCRestrictedBucketNameParam}
          aws s3 cp /s3-data/good-afternoon.txt s3://${VPCRestrictedBucketNameParam}
          aws s3 cp /s3-data/good-evening.txt s3://${VPCRestrictedBucketNameParam}

          aws s3 cp /s3-data/good-morning.txt s3://${VPCEndpointRestrictedBucketNameParam}
          aws s3 cp /s3-data/good-afternoon.txt s3://${VPCEndpointRestrictedBucketNameParam}
          aws s3 cp /s3-data/good-night.txt s3://${VPCEndpointRestrictedBucketNameParam}
      Tags:
        - Key: Name
          Value: Green

# see
# - https://www.1strategy.com/blog/2020/06/23/getting-crafty-with-iam-conditions/
