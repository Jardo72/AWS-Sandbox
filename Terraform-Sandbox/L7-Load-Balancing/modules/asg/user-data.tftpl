#!/bin/bash

#
# Copyright 2022 Jaroslav Chmurny
#
# This file is part of AWS Sandbox.
#
# AWS Sandbox is free software developed for educational purposes. It
# is licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

yum update -y
yum install java-1.8.0-openjdk -y
yum install amazon-cloudwatch-agent -y


# create the user used to run the application
useradd --no-create-home --shell /bin/false albdemo


# create installation directory and download the application JAR file
mkdir /opt/alb-demo
aws s3 cp s3://${deployment_artifactory_bucket}/${deployment_artifactory_prefix}/${application_jar_file} /opt/alb-demo/${application_jar_file}
chown -R albdemo:albdemo /opt/alb-demo


# create service unit file for the application
# see also 
# - https://www.baeldung.com/linux/redirect-systemd-output-to-file
# - https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#StandardOutput=
JAVA_EXECUTABLE=$(which java)
cat > /etc/systemd/system/albdemo.service <<-EOF
[Unit]
Description=ALB-Demo
Wants=network.target
After=network.target

[Service]
Type=simple

WorkingDirectory=/opt/alb-demo
User=albdemo
Group=albdemo

ExecStart=$JAVA_EXECUTABLE -Dserver.port=${ec2_port} -Dlogging.config=logback-config.xml -jar ${application_jar_file}
StandardOutput=file:/tmp/alb-demo.log
StandardError=file:/tmp/alb-demo-error.log

RestartSec=15
Restart=always

[Install]
WantedBy=multi-user.target
EOF


# create logging configuration for the application
# see also https://www.baeldung.com/logback
cat > /opt/alb-demo/logback-config.xml <<-EOF
<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true" scan="false">
  <appender name="FILE" class="ch.qos.logback.core.FileAppender">
    <file>/tmp/alb-demo.log</file>
    <append>false</append>
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
  </appender>

  <root level="debug">
    <appender-ref ref="FILE" />
  </root>
</configuration>
EOF


# start (and enable) the application service
systemctl daemon-reload
systemctl start albdemo
systemctl status albdemo
systemctl enable albdemo

# generate CloudWatch Agent configuration
# see also https://github.com/awsdocs/amazon-cloudwatch-user-guide/blob/master/doc_source/CloudWatch-Agent-Configuration-File-Details.md
CLOUDWATCH_AGENT_CONFIG_DIR=/opt/aws/amazon-cloudwatch-agent/etc
CLOUDWATCH_AGENT_CONFIG_FILE=$CLOUDWATCH_AGENT_CONFIG_DIR/amazon-cloudwatch-agent.json
mkdir -p $CLOUDWATCH_AGENT_CONFIG_DIR
cat > $CLOUDWATCH_AGENT_CONFIG_FILE <<JSON_EOF
{
    "agent": {
        "debug": true,
        "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
        "run_as_user": "cwagent",
        "region": "${aws_region}"
    },
    "logs": {
        "logs_collected": {
            "files": {
                "collect_list": [
                    {
                        "file_path": "/tmp/alb-demo.log",
                        "log_group_name": "ALB-Demo-App-Log",
                        "retention_in_days": 7
                    }
                ]
            }
        }
    }
}
JSON_EOF

# start and enable CloudWatch Agent
# TODO: do we need this even if CloudWatch Agent will only publish log files (no metrics)?
# mkdir -p /usr/share/collectd
# touch /usr/share/collectd/types.db

# /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:$CLOUDWATCH_AGENT_CONFIG_FILE
