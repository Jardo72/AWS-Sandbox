#
# Copyright 2021 Jaroslav Chmurny
#
# This file is part of AWS Sandbox.
#
# AWS Sandbox is free software developed for educational purposes. It
# is licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicationlicationlicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from argparse import ArgumentParser, RawTextHelpFormatter
from typing import Any, Dict

from boto3 import resource


def create_command_line_arguments_parser() -> ArgumentParser:
    parser = ArgumentParser(description = "CloudWatch Metrics Generator", formatter_class = RawTextHelpFormatter)

    parser.add_argument('instance_id',
        help='unique instance ID generated by the metrics generation script')
    parser.add_argument('start_time',
        help='start timestamp of the time frame for which the statitics are to be retrieved')
    parser.add_argument('end_time',
        help='end timestamp of the time frame for which the statitics are to be retrieved')
    parser.add_argument('period_sec',
        help='granularity of the data points to be returned',
        type=int)

    return parser


def parse_command_line_arguments():
    parser = create_command_line_arguments_parser()
    return parser.parse_args()


def retrieve_statistics(params) -> Dict[str, Any]:
    cloud_watch = resource('cloudwatch')
    metric = cloud_watch.Metric('JCH', 'RandomValue')
    dimensions = [{'Name': 'InstanceId', 'Value': params.instance_id}]
    statistics = metric.get_statistics(
        Dimensions=dimensions,
        StartTime=params.start_time,
        EndTime=params.end_time,
        Statistics=['SampleCount', 'Minimum', 'Maximum', 'Average'],
        Period=params.period_sec,
        Unit='None')
    return statistics


def print_single_datapoint(data_point: Dict[str, Any]) -> None:
    print()
    print(60 * '-')
    print(f'Timestamp:    {data_point["Timestamp"]}')
    print(f'Sample count: {data_point["SampleCount"]}')
    print(f'Min value:    {data_point["Minimum"]}')
    print(f'Max value:    {data_point["Maximum"]}')
    print(f'Avg value:    {data_point["Average"]:.1f}')


def print_statistics(statistics: Dict[str, Any]) -> None:
    for data_point in statistics['Datapoints']:
        print_single_datapoint(data_point)


def main() -> None:
    params = parse_command_line_arguments()
    statistics = retrieve_statistics(params)
    print_statistics(statistics)


if __name__ == "__main__":
    main()
