#
# Copyright 2020 Jaroslav Chmurny
#
# This file is part of AWS Sandbox.
#
# AWS Sandbox is free software developed for educational purposes. It
# is licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Set of illustrational Lambda functions and other resources (e.g. SSM parameter, Secrets Manager secret)
  the functions will access using the AWS SDK. This template also creates IAM policies & roles granting the
  functions access to the resources.

Parameters:
  SSMParameterNameParam:
    Description: The name of the parameter stored in the SSM Parameter Store & read by one of the Lambda functions
    Type: String
    Default: "/lambda-samples/sample-param"

  SSMParameterValueParam:
    Description: The value of the parameter stored in the SSM Parameter Store & read by one of the Lambda functions
    Type: String
    MinLength: 5
    MaxLength: 20
    Default: "Sample value SSM"

  SecretNameParam:
    Description: The name of the secret stored in the Secrets Manager & read by one of the Lambda functions
    Type: String
    Default: "lambda-secret"

  SecretValueParam:
    Description: The value of the secret stored in the Secrets Manager & read by one of the Lambda functions
    Type: String
    MinLength: 5
    MaxLength: 20
    Default: "Secret value"

  EnvironmentVariableOneValueParam:
    Description: The value of a sample env. variable (SAMPLE_VAR_ONE) used for one of the Lambda functions
    Type: String
    MinLength: 5
    MaxLength: 20
    Default: "Sample value #1"

  EnvironmentVariableTwoValueParam:
    Description: The value of a sample env. variable (SAMPLE_VAR_ONE) used for one of the Lambda functions
    Type: String
    MinLength: 5
    MaxLength: 20
    Default: "Sample value #2"

  FunctionCodeS3BucketParam:
    Description: The name of the S3 bucket storing the ZIP files with the code for the Lambda functions
    Type: String

  InvocationDumpFunctionS3KeyParam:
    Description: S3 object key with the filename of the ZIP file containing the code for the invocation-dump function
    Type: String

  ReadSSMParameterFunctionS3KeyParam:
    Description: S3 object key with the filename of the ZIP file containing the code for the read-SSM-parameter function
    Type: String

  ReadSecretFunctionS3KeyParam:
    Description: S3 object key with the filename of the ZIP file containing the code for the SQS-recipient function
    Type: String

  SQSRecipientFunctionS3KeyParam:
    Description: S3 object key with the filename of the ZIP file containing the code for the read-secret function
    Type: String

  SuccessFailureDestinationsDemoS3KeyParam:
    Description: S3 object key with the filename of the ZIP file containing the code for the success-failure-destinations-demo function
    Type: String


Resources:
  SSMParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Parameter stored in the SSM Parameter Store & read by one of the Lambda functions
      Name: !Ref SSMParameterNameParam
      Value: !Ref SSMParameterValueParam
      Type: String
      Tier: Standard

  Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret stored in the Secrets Manager & read by one of the Lambda functions
      Name: !Ref SecretNameParam
      SecretString: !Ref SecretValueParam

  TriggerSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-Lambda-Trigger-Queue"

  OnSuccessDestinationSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-On-Success-Destination-Queue"

  OnFailureDestinationSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-On-Failure-Destination-Queue"

  # the InvocationDumpFunction in fact does not need any special permissions, but the Role
  # property is mandatory; so the easiest/cheapest way to solve the problem is to create
  # a role and use an existing AWS managed policy
  InvocationDumpRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-InvocationDump-Role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AWSLambdaExecute"

  InvocationDumpFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that dumps various invocation details (event, context, env. variables etc.)
      FunctionName: DumpInvocation
      Handler: dump-invocation.main
      Runtime: python3.8
      Role: !GetAtt ["InvocationDumpRole", "Arn"]
      Code:
        S3Bucket: !Ref FunctionCodeS3BucketParam
        S3Key: !Ref InvocationDumpFunctionS3KeyParam
      Environment:
        Variables:
          SAMPLE_VAR_ONE: !Ref EnvironmentVariableOneValueParam
          SAMPLE_VAR_TWO: !Ref EnvironmentVariableTwoValueParam

  SSMParameterReadAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-SSMParameterReadAccess-Policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - ssm:GetParametersByPath
          - ssm:GetParameters
          - ssm:GetParameter
          Resource: "*"

  SSMParameterReadRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-SSMParameterReader-Role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - !Ref SSMParameterReadAccessPolicy

  ReadSSMParameterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that reads the specified parameter from the SSM Parameter Store using the SDK
      FunctionName: ReadSSMParameter
      Handler: read-ssm-parameter.main
      Runtime: python3.8
      Role: !GetAtt ["SSMParameterReadRole", "Arn"]
      Code: 
        S3Bucket: !Ref FunctionCodeS3BucketParam
        S3Key: !Ref ReadSSMParameterFunctionS3KeyParam

  SecretsReadAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-SecretsReadAccess-Policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource: "*"

  SecretsReaderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-SecretsReader-Role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - !Ref SecretsReadAccessPolicy

  ReadSecretFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that reads the specified secret from the Secrets Manager using the SDK
      FunctionName: ReadSecret
      Handler: read-secret-string.main
      Runtime: python3.8
      Role: !GetAtt ["SecretsReaderRole", "Arn"]
      Code: 
        S3Bucket: !Ref FunctionCodeS3BucketParam
        S3Key: !Ref ReadSecretFunctionS3KeyParam

  SQSRecipientRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-SQSRecipient-Role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole

  SQSRecipientFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that reads the specified secret from the Secrets Manager using the SDK
      FunctionName: ReceiveMessages
      Handler: sqs-recipient.main
      Runtime: python3.8
      Role: !GetAtt ["SQSRecipientRole", "Arn"]
      Code: 
        S3Bucket: !Ref FunctionCodeS3BucketParam
        S3Key: !Ref SQSRecipientFunctionS3KeyParam

  SQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: True
      EventSourceArn: !GetAtt ["TriggerSQSQueue", "Arn"]
      FunctionName: !GetAtt ["SQSRecipientFunction", "Arn"]

  # SQS full access is more than needed, but this is the most convenient way to make this work
  SuccessFailureDestinationsDemoRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-SuccessFailureDestinationsDemo-Role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  SuccessFailureDestinationsDemoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that illustrates on-success/on-failure destinations
      FunctionName: SuccessFailureDestinationsDemo
      Handler: success-failure-destinations-demo.main
      Runtime: python3.8
      Role: !GetAtt ["SuccessFailureDestinationsDemoRole", "Arn"]
      Code: 
        S3Bucket: !Ref FunctionCodeS3BucketParam
        S3Key: !Ref SuccessFailureDestinationsDemoS3KeyParam

  SuccessFailureDestinationsDemoEventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      DestinationConfig:
        OnSuccess:
          Destination: !GetAtt ["OnSuccessDestinationSQSQueue", "Arn"]
        OnFailure:
          Destination: !GetAtt ["OnFailureDestinationSQSQueue", "Arn"]
      FunctionName: !Ref SuccessFailureDestinationsDemoFunction
      Qualifier: $LATEST

